#include <tree.hpp>

namespace AVLTree
{

//–ø–∞–±–ª–∏–∫ –∫–ª–∞—Å—Å —É–∑–µ–ª
struct Node
{
	Node(int value)
	{
		this->data = value;
		this->left = nullptr;
		this->right = nullptr;
	}

	~Node() {}

	int data;
	Node *left;
	Node *right;
};

//—Ñ—É–Ω–∫—Ü–∏—è, —É–±–∏—Ä–∞—é—â–∞—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏—è
std::vector<int> TUI::CorrectFunction(std::vector<int> a)
{
	std::vector<int> uniques;
	for (int value : a)
	{
		if (std::find(uniques.begin(), uniques.end(), value) == uniques.end())
			uniques.push_back(value);
	}

	return uniques;
};

//–≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é
int TUI::ChosenFunction()
{
	int chosenValue;
	std::cout << "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–π:" << std::endl;
	std::cout << "1. –í—ã–≤–µ—Å—Ç–∏ –¥–µ—Ä–µ–≤–æ –Ω–∞ —ç–∫—Ä–∞–Ω" << std::endl;
	std::cout << "2. –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤ –¥–µ—Ä–µ–≤–∞" << std::endl;
	std::cout << "3. –î–æ–±–∞–≤–∏—Ç—å —É–∑–µ–ª –≤ –¥–µ—Ä–µ–≤–æ" << std::endl;
	std::cout << "4. –£–¥–∞–ª–∏—Ç—å —É–∑–µ–ª –∏–∑ –¥–µ—Ä–µ–≤–∞" << std::endl;
	std::cout << "5. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ—Ä–µ–≤–æ –≤ —Ñ–∞–π–ª" << std::endl;
	std::cout << "6. –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ä–µ–≤–æ –∏–∑ —Ñ–∞–π–ª–∞" << std::endl;
	std::cout << "7. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —É–∑–ª–∞" << std::endl;
	std::cout << "8. –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã" << std::endl;
	std::cin >> chosenValue;
	return chosenValue;
}

void TUI::outStars()
{
	std::cout << "******************" << std::endl;
}

//–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
void TUI::MakeDecisionTree(int chosenValue, Tree *tree)
{
	switch (chosenValue)
	{
	case 1:
	{
		tree->show();

		int chosenValue = this->ChosenFunction();
		this->MakeDecisionTree(chosenValue, tree);
		break;
	}
	case 2:
	{
		std::string choseOrder;
		std::cout << "a. –ü—Ä—è–º–æ–π –æ–±—Ö–æ–¥" << std::endl;
		std::cout << "b. –ü–æ–ø–µ—Ä–µ—á–Ω—ã–π –æ–±—Ö–æ–¥" << std::endl;
		std::cout << "c. –û–±—Ä–∞—Ç–Ω—ã–π –æ–±—Ö–æ–¥" << std::endl;
		std::cin >> choseOrder;
		if (choseOrder == "a")
		{
			outStars();
			tree->print("pre");
			outStars();
		}
		else if (choseOrder == "b")
		{
			outStars();
			tree->print("in");
			outStars();
		}
		else if (choseOrder == "c")
		{
			outStars();
			tree->print("post");
			outStars();
		}
		else
		{
			outStars();
			std::cout << "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—Ö–æ–¥–Ω–æ–π —Å–∏–º–≤–æ–ª";
			outStars();
		}

		int chosenValue = this->ChosenFunction();
		this->MakeDecisionTree(chosenValue, tree);
		break;
	}
	case 3:
	{
		int insertValue;
		outStars();
		std::cout << "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —É–∑–ª–∞:"
				  << " ";
		std::cin >> insertValue;
		outStars();
		bool isInsert = tree->insert(insertValue);
		if (!isInsert)
		{
			outStars();
			std::cout << "–£–∑–µ–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –¥–µ—Ä–µ–≤–µ" << std::endl;
			outStars();
		}
		else
		{
			outStars();
			std::cout << "–£–∑–µ–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!" << std::endl;
			outStars();
		}
		int chosenValue = this->ChosenFunction();
		this->MakeDecisionTree(chosenValue, tree);
		break;
	}
	case 4:
	{
		int removeValue;
		outStars();
		std::cout << "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª—è–µ–º–æ–≥–æ —É–∑–ª–∞:"
				  << " ";
		std::cin >> removeValue;
		outStars();
		bool isDelete = tree->remove(removeValue);
		if (!isDelete)
		{
			outStars();
			std::cout << "–£–∑–µ–ª –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ –¥–µ—Ä–µ–≤–µ" << std::endl;
			outStars();
		}
		else
		{
			outStars();
			std::cout << "–£–∑–µ–ª –±—ã–ª —É—Å–ø–µ—â–Ω–æ —É–¥–∞–ª–µ–Ω" << std::endl;
			outStars();
		}
		int chosenValue = this->ChosenFunction();
		this->MakeDecisionTree(chosenValue, tree);
		break;
	}
	case 5:
	{
		tree->save("");
		int chosenValue = this->ChosenFunction();
		this->MakeDecisionTree(chosenValue, tree);
		break;
	}
	case 6:
	{
		tree->load("");
		int chosenValue = this->ChosenFunction();
		this->MakeDecisionTree(chosenValue, tree);
		break;
	}
	case 7:
	{
		int searchValue;
		outStars();
		std::cout << "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:"
				  << " ";
		std::cin >> searchValue;
		outStars();
		bool isExist = tree->exists(searchValue);
		if (isExist)
		{
			outStars();
			std::cout << "–£–∑–µ–ª –Ω–∞–π–¥–µ–Ω üíÉ" << std::endl;
			outStars();
		}
		else
		{
			outStars();
			std::cout << "–£–∑–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω üôá‚Äç" << std::endl;
			outStars();
		}
		int chosenValue = this->ChosenFunction();
		this->MakeDecisionTree(chosenValue, tree);
		break;
	}
	case 8:
	{
		outStars();
		std::cout << "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã ? (–î–∞|–ù–µ—Ç)" << std::endl;
		std::string answer;
		std::cin >> answer;
		outStars();
		std::transform(answer.begin(), answer.end(), answer.begin(), ::tolower);
		if (answer == "–¥–∞" || answer == "–î–∞" || answer == "yes")
		{
			outStars();
			std::cout << "Quit!" << std::endl;
			outStars();
			return;
		}
		else
		{
			int chosenValue = this->ChosenFunction();
			this->MakeDecisionTree(chosenValue, tree);
		}
		break;
	}
	default:
	{
		outStars();
		std::cout << "Error" << std::endl;
		outStars();
		break;
	}
	}
}

//–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
Tree::Tree(){};

//–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —á–µ—Ä–µ–∑ –≤–µ–∫—Ç–æ—Ä
Tree::Tree(std::vector<int> treeList)
{
	for (int i = 0; i < treeList.size(); ++i)
	{
		this->treeVector.push_back(treeList[i]);
	}
	this->root = nullptr;
	std::for_each(treeList.begin(), treeList.end(), [&](int const &val) {
		this->insert(this->root, val);
	});
};

//–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —á–µ—Ä–µ–∑ –≤—Ö–æ–¥–Ω–æ–π —Å–ø–∏—Å–æ–∫ { 1,2,... }
Tree::Tree(std::initializer_list<int> list)
{
	this->root = nullptr;
	std::for_each(list.begin(), list.end(), [&](int const &val) {
		this->insert(this->root, val);
	});
};

//–¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
Tree::~Tree()
{
	clear(root);
	//delete treeVector;
};

//–≤—Å—Ç–∞–≤–∫–∞ –≤ –¥–µ—Ä–µ–≤–æ (–ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
bool Tree::insert(Node *&root, int value)
{
	if (root == nullptr)
		root = new Node(value);
	else if (value < root->data)
	{
		this->insert(root->left, value);
	}
	else
	{
		this->insert(root->right, value);
	}
	return true;
}

// –≤—Å—Ç–∞–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è (–≤—ã–∑–æ–≤ –∏–∑ –≤–Ω–µ)
bool Tree::insert(int value)
{
	if (this->exists(value))
		return false;
	return this->insert(root, value);
}

Node *Tree::getMin(Node *&root)
{
	if (root == nullptr)
	{
		return root;
	}
	if (root->left == nullptr)
	{
		return root;
	}
	else
	{
		return getMin(root->left);
	}
}

//—É–¥–∞–ª–µ–Ω–∏–µ —É–∑–ª–∞ –∏–∑ –¥–µ—Ä–µ–≤–∞ (–ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
Node *Tree::remove(Node *&root, int value)
{
	if (root == nullptr)
	{
		return nullptr;
	}
	if (value == root->data)
	{
		if (root->left != nullptr && root->right != nullptr)
		{
			//Find Minimum from Right Tree OR find Maximum from Left Tree.
			root->data = this->getMin(root->right)->data;
			root->right = remove(root->right, root->data);
		}
		else if (root->left == nullptr)
		{
			return root->right;
		}
		else
		{
			return root->left;
		}
	}
	else if (value > root->data)
	{
		root->right = remove(root->right, value);
	}
	else
	{
		root->left = remove(root->left, value);
	}
	return root;
}

//—É–¥–∞–ª–µ–Ω–∏–µ (–≥–ª–æ–±–∞–ª—å–Ω–∞—è)
bool Tree::remove(int value)
{
	Node *deletedNode = this->remove(this->root, value);
	std::cout << deletedNode->data << std::endl;
	if (deletedNode == nullptr)
		return false;
	else
		return true;
}

Node *Tree::clear(Node *&currNode)
{
	if (currNode == nullptr)
	{
		return nullptr;
	}
	else
	{
		this->clear(currNode->left);
		this->clear(currNode->right);
		delete currNode;
	}
	return nullptr;
}

//–ø–æ–∏—Å–∫ —É–∑–ª–∞ –≤ –¥–µ—Ä–µ–≤–µ (–ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
bool Tree::exists(Node *&root, int value)
{
	if (root->data == value)
	{
		return true;
	}
	else if ((root->data > value) && (root->left != nullptr))
	{
		return exists(root->left, value);
	}
	else if ((root->data < value) && (root->right != nullptr))
	{
		return exists(root->right, value);
	}
	else
	{
		return false;
	}
}

//–ø–æ–∏—Å–∫ (–≥–ª–æ–±–∞–ª—å–Ω–∞—è)
bool Tree::exists(int value)
{
	return this->exists(this->root, value);
}

//–≤—ã–≤–æ–¥ –¥–µ—Ä–µ–≤–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä—è–¥–∫–∞—Ö (III —ç—Ç–∞–ø) (private)
void Tree::print(std::string order, Node *root)
{
	if (order == "pre")
	{
		if (root != nullptr)
		{
			std::cout << root->data << " ";
			print(order, root->left);
			print(order, root->right);
		}
	}

	if (order == "in")
	{
		if (root != nullptr)
		{
			print(order, root->left);
			std::cout << root->data << " ";
			print(order, root->right);
		}
	}

	if (order == "post")
	{
		if (root != nullptr)
		{
			print(order, root->left);
			print(order, root->right);
			std::cout << root->data << " ";
		}
	}
}

//–≤—ã–≤–æ–¥ –¥–µ—Ä–µ–≤–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä—è–¥–∫–∞—Ö (III —ç—Ç–∞–ø) (public)
void Tree::print(std::string order)
{
	if (this->root == nullptr)
	{
		std::cout << "–î–µ—Ä–µ–≤–æ –ø—É—Å—Ç–æ" << std::endl;
		return;
	}
	print(order, this->root);
	std::cout << "\n";
}

//–≤—ã–≤–æ–¥ –¥–µ—Ä–µ–≤–∞ –Ω–∞ —ç–∫—Ä–∞–Ω (private)
void Tree::showTree(Node *root, int size)
{
	if (root == nullptr)
		return;
	showTree(root->right, size + 1);
	for (int i = 0; i < size; ++i)
		std::cout << " --";
	if (size != 0)
		std::cout << " --";
	std::cout << root->data << std::endl;
	showTree(root->left, size + 1);
}

// –≤—ã–≤–æ–¥ –¥–µ—Ä–µ–≤–∞ –Ω–∞ —ç–∫—Ä–∞–Ω (public)
void Tree::show()
{
	int sizeTree = 2;
	if (this->root == nullptr)
	{
		std::cout << "–î–µ—Ä–µ–≤–æ –ø—É—Å—Ç–æ" << std::endl;
	}
	else
	{
		this->showTree(this->root, sizeTree);
	}
}

void Tree::makeOutput(Node *root)
{
	if (root != nullptr)
	{
		this->output = this->output + std::to_string(root->data) + " ";
		makeOutput(root->left);
		makeOutput(root->right);
	}
}

//—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º path
bool Tree::save(std::string input_path)
{
	std::string path = input_path;
	if (path == "")
	{
		std::cout << "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É" << std::endl;
		std::cin >> path;
	}

	std::ofstream file;
	std::ifstream filecheck;
	filecheck.open(path);

	if (!filecheck)
	{
		file.open(path);
		this->output = "";
		this->makeOutput(this->root);
		file << this->output;
		file.close();
		std::cout << "–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ" << std::endl;
	}
	else
	{
		file.open(path);
		this->output = "";
		this->makeOutput(this->root);
		file << this->output;
		file.close();
		std::cout << "–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ" << std::endl;
		filecheck.close();
	}
	return true;
}

bool Tree::load(std::string input_path)
{
	std::string path = input_path;
	if (path == "")
	{
		std::cout << "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É" << std::endl;
		std::cin >> path;
	}

	std::ifstream file;
	file.open(path);
	if (!file)
	{
		std::cout << "–§–∞–π–ª c –∑–∞–¥–∞–Ω–Ω—ã–º –ø—É—Ç–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" << std::endl;
		return false;
	}
	else
	{
		if (root != nullptr)
			clear(root);

		int element;
		while (file >> element)
		{
			this->insert(root, element);
		}
		std::cout << "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å—á–∏—Ç–∞–Ω" << std::endl;
		return true;
	}
}

//–µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª
bool Tree::fileExist(std::string path)
{
	std::ifstream file(path);
	if (file.is_open())
	{
		file.close();
		return true;
	}
	else
	{
		file.close();
		return false;
	}
}
}
